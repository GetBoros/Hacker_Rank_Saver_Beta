#include "Point.h"

// Global istream/ostream
void Point_Change_X(APoint &point)
{
    point.X = -1;
}
//------------------------------------------------------------------------------------------------------------------
ostream &operator<<(ostream &os, const APoint &point)
{
    os << point.X << " " << point.Y << " " << point.Z;
    return os;
}
//------------------------------------------------------------------------------------------------------------------
istream &operator>>(istream &is, APoint &point)
{
    is >> point.X >> point.Y >> point.Z;
    return is;
}
//------------------------------------------------------------------------------------------------------------------



// APoint
APoint::APoint()
    : X(0), Y(0), Z(0), Arr{2, 5, 6, 4, 9}
{
}
//------------------------------------------------------------------------------------------------------------------
APoint::APoint(int x, int y)
    : X(x), Y(y), Z(0), Arr{2, 5, 6, 4, 9}
{
}
//------------------------------------------------------------------------------------------------------------------
APoint::APoint(int x, int y, int z)
    :X(x), Y(y), Z(z), Arr{2, 5, 6, 4, 9}
{
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator++()
{
    X++;
    Y++;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator++(int value)
{
    APoint* temp = new APoint(*this);  // Создаем новый объект в динамической памяти и копируем старое значение объекта

    X++;
    Y++;

    return *temp;  // Возвращаем разыменованный указатель на новый объект
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator--()
{
    X--;
    Y--;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator--(int value)
{
    APoint *temp = new APoint(*this);  // Создаем новый объект в динамической памяти и копируем старое значение объекта

    X--;
    Y--;

    return *temp;  // Возвращаем разыменованный указатель на новый объект
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator=(const APoint &other)
{
    if (this == &other)
        return *this;

    X = other.X;
    Y = other.Y;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator+(const APoint &other)
{
    X = X + other.X;
    Y = Y + other.Y;
    
    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator-(const APoint &other)
{
    X = X - other.X;
    Y = Y - other.Y;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator*(const APoint &other)
{
    X = X * other.X;
    Y = Y * other.Y;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
APoint &APoint::operator/(const APoint &other)
{
    X = X / other.X;
    Y = Y / other.Y;

    return *this;
}
//------------------------------------------------------------------------------------------------------------------
bool APoint::operator==(const APoint &other)
{
    if (X == other.X && Y == other.Y)
        return true;
    else
        return false;
}
//------------------------------------------------------------------------------------------------------------------
bool APoint::operator!=(const APoint &other)
{
    if (X == other.X && Y == other.Y)
        return false;
    else
        return true;
}
//------------------------------------------------------------------------------------------------------------------
int &APoint::operator[](int index)
{
    if (index < AsConfig::Point_Array_Length)
        return Arr[index];
    else
        return Arr[AsConfig::Point_Array_Length - 1];
}
//------------------------------------------------------------------------------------------------------------------
void APoint::Print()
{
    cout << "X: " << X  << "\tY: " << Y  << "\tZ: " << Z << endl;
}
//------------------------------------------------------------------------------------------------------------------
int APoint::Get_X() const
{
    return X;
}
//------------------------------------------------------------------------------------------------------------------
int APoint::Get_Y() const
{
    return Y;
}
//------------------------------------------------------------------------------------------------------------------
